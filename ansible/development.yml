- name: Setup local development environment
  hosts: localhost

  vars:
    user: "{{ ansible_user_id }}"
    home: "{{ lookup('env','HOME') }}"
    projects: "projects"
    projects_dir: "{{ home }}/{{ projects }}"
      
  tasks:
  - debug:
      msg: "Applying playbook for user '{{ user }}' with home directory '{{ home }}' and with projects directory '{{ projects_dir }}'"

  - name: Install and configure git
    block:
      - name: Install git
        apt:
          pkg:
            - git
          state: present
        become: yes

      - name: Configure git
        tags: [never, configure-git]
        block:
          - debug:
              msg: "Configuring git with global user {{ git_username }} and global email {{ git_email }}"

          - name: Apply base gitconfig
            get_url:
              url: https://raw.githubusercontent.com/karlwalsh/env/master/config/git/gitconfig
              dest: "{{ home }}/.gitconfig"

          - name: Configure git username
            community.general.git_config:
              name: user.name
              value: "{{ git_username }}"
              scope: global

          - name: Configure git email address
            community.general.git_config:
              name: user.email
              value: "{{ git_email }}"
              scope: global

          - name: Configure global gitignore
            get_url:
              url: https://raw.githubusercontent.com/karlwalsh/env/master/config/git/gitignore
              dest: "{{ home }}/.gitignore"

  - name: "Ensure projects directory exists at '{{ projects_dir }}'"
    file:
      path: "{{ projects_dir }}"
      state: directory

  - name: Install and configure zsh environment
    block:
      - name: Install zsh
        apt:
          pkg:
            - zsh
          state: present
        become: yes

      - name: Install oh-my-zsh
        git:
          repo: https://github.com/robbyrussell/oh-my-zsh
          dest: "{{ projects_dir }}/oh-my-zsh"
          force: yes

      - name: Install z (jump around)
        git:
          repo: https://github.com/rupa/z.git
          dest: "{{ projects_dir }}/z"

      - name: Configure .zshrc
        get_url:
          url: https://raw.githubusercontent.com/karlwalsh/env/master/config/zsh/zshrc
          dest: "{{ home }}/.zshrc"

      - name: Switch shell to zsh
        user:
          name: "{{ user }}"
          shell: /bin/zsh
        become: yes

  - name: Install and configure tmux
    block:
      - name: Install tmux
        apt:
          pkg:
            - tmux
            - tmuxinator
          state: present
        become: yes

      - name: Configure tmux
        get_url:
          url: https://raw.githubusercontent.com/karlwalsh/env/master/config/tmux/tmux.conf
          dest: "{{ home }}/.tmux.conf"

      - name: Ensure tmuxinator config directory exists
        file:
          path: "{{ home }}/.config/tmuxinator"
          state: directory

      - name: Configure tmuxinator
        get_url:
          url: https://raw.githubusercontent.com/karlwalsh/env/master/config/tmuxinator/default.yml
          dest: "{{ home }}/.config/tmuxinator/default.yml"

  - name: Install and configure vim
    block:
      - name: Install development tools
        apt:
          pkg:
            - vim
          state: present
        become: yes

      - name: Configure vim
        copy:
          dest: "{{ home }}/.vimrc"
          content: |
            set tabstop=4
            set softtabstop=4
            set shiftwidth=4
            set expandtab
      
  - name: Install development tools (apt)
    apt:
      pkg:
        - maven
        - httpie
        - curl
        - tilda
        - glogg
      state: present
    become: yes

  - name: Install and configure IntelliJ IDEA Ultimate
    block:
      - name: Install IntelliJ IDEA Ultimate
        snap:
          name: intellij-idea-ultimate
          classic: yes
        become: yes

      - name: Determine which version we installed
        command: snap info intellij-idea-ultimate
        register: intellij_idea_ultimate_snap_info

      - name: Extract version number from snap installation info
        set_fact:
          version: "{{ intellij_idea_ultimate_snap_info.stdout | regex_search(regex, '\\1') | first}}"
        vars:
          regex: 'installed:\s+(\d+\.\d+)\.\d+'

      - debug:
          msg: "We installed version {{ version }} of IntelliJ IDEA Ultimate"

      - name: Ensure IntelliJ IDEA config directory exists
        file:
          path: "{{ home }}/.config/JetBrains/IntelliJIdea{{ version }}"
          state: directory
        register: intellij_idea_config_directory

      - debug:
          msg: "IntelliJ IDEA config directory exists at {{ intellij_idea_config_directory.path }}"

      - name: "Configure IntelliJ IDEA - idea.properties"
        copy:
          dest: "{{ intellij_idea_config_directory.path }}/idea.properties"
          content: |
            idea.max.intellisense.filesize=5000

      - name: Ensure IntelliJ IDEA config codestyles directory exists
          file:
            path: "{{ home }}/.config/JetBrains/IntelliJIdea{{ version }}/codestyles"
            state: directory
          register: intellij_idea_codestyles_directory

      - debug:
          msg: "IntelliJ IDEA codestyles directory is {{ intellij_idea_codestyles_directory.path }}"

      - name: "Configure IntelliJ IDEA - codestyles"
        get_url:
          url: https://raw.githubusercontent.com/karlwalsh/env/master/config/idea/codestyles/Default.xml
          dest: "{{ intellij_idea_codestyles_directory.path }}/Default.xml"

  - name: Install Insomnia REST Client
    snap:
      name: insomnia
    become: yes

  - name: Install fonts
    apt:
      pkg: 
        - fonts-firacode
        - fonts-liberation
    become: yes

  - name: Install and configure kubernetes
    block:
      - name: Get stable kubectl version
        uri:
          url: https://dl.k8s.io/release/stable.txt
          return_content: yes
        register: kubectl_version

      - name: Download and install kubernetes components
        block:
          - name: Download minikube
            get_url:
              url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              dest: /usr/local/bin/minikube

          - name: Install minikube
            file:
              path: /usr/local/bin/minikube
              mode: '0755'

          - name: Download kubectl {{ kubectl_version.content }}
            get_url:
              url: "https://dl.k8s.io/release/{{ kubectl_version.content }}/bin/linux/amd64/kubectl"
              dest: /usr/local/bin/kubectl

          - name: Make kubectl executable
            file:
              path: /usr/local/bin/kubectl
              mode: '0755'

          - name: Download kubectx
            get_url:
              url: https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx
              dest: /usr/local/bin/kubectx
            become: yes

          - name: Make kubectx executable
            file:
              path: /usr/local/bin/kubectx
              mode: '0755'

          - name: Download kubens
            get_url:
              url: https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens
              dest: /usr/local/bin/kubens

          - name: Make kubens executable
            file:
              path: /usr/local/bin/kubens
              mode: '0755'
        become: yes

      - name: Ensure zsh completions directory is available
        file:
          path: "{{ projects_dir }}/oh-my-zsh/completions"
          state: directory

      - name: Install kubectx zsh completions
        get_url:
          url: https://raw.githubusercontent.com/ahmetb/kubectx/master/completion/kubectx.zsh
          dest: "{{ projects_dir }}/oh-my-zsh/completions/_kubectx.zsh"

      - name: Install kubens zsh completions
        get_url:
          url: https://raw.githubusercontent.com/ahmetb/kubectx/master/completion/kubens.zsh
          dest: "{{ projects_dir }}/oh-my-zsh/completions/_kubens.zsh"

  - name: Install and configure JDKs
    block:
      - name: Install JDK 8
        apt:
          name: openjdk-8-jdk

      - name: Install JDK 11
        apt:
          name: openjdk-11-jdk

      - name: Select JDK 11 (java)
        alternatives:
          name: java
          path: /usr/lib/jvm/java-11-openjdk-amd64/bin/java

      - name: Select JDK 11 (javac)
        alternatives:
          name: javac
          path: /usr/lib/jvm/java-11-openjdk-amd64/bin/javac
    become: yes

  - name: Install and configure docker
    block:
      - name: Install docker pre-requisites
        apt:
          pkg:
            - apt-transport-https
            - ca-certificates
            - gnupg-agent
            - software-properties-common
            - curl
        become: yes

      - name: Configure apt so we can install docker
        block:
          - name: Add Docker gpg apt key
            apt_key:
              keyserver: https://download.docker.com/linux/ubuntu/gpg
              id: 0EBFCD88
              state: present

          - name: Add Docker repository
            apt_repository:
              repo: deb https://download.docker.com/linux/ubuntu groovy stable
              state: present
              update_cache: yes
        become: yes

      - name: Install docker components
        block:
          - name: Install docker-ce
            apt:
              pkg:
                - docker-ce
                - docker-ce-cli
                - containerd.io
              state: present

          - name: Install docker-compose
            apt:
              name: docker-compose
        become: yes

      - name: Ensure user {{ user }} can access docker
        block:
          - name: Ensure docker group exists
            group:
              name: docker
              state: present

          - name: Add user {{ user }} to docker group
            user:
              name: "{{ user }}"
              groups: docker
              append: yes
        become: yes

      - name: Ensure docker is running
        block:
          - name: Ensure docker service is running
            systemd:
              name: docker.service
              state: started
              enabled: yes

          - name: Ensure containerd service is running
            systemd:
              name: containerd.service
              state: started
              enabled: yes
        become: yes

      - name: Use portainer to manage docker
        block:
          - name: Create portainer volume
            docker_volume:
              name: portainer_data

          - name: Start portainer container
            docker_container:
              name: portainer
              image: portainer/portainer-ce
              restart_policy: always
              ports:
                - 8000:8000
                - 9000:9000
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
                - portainer_data:/data
        become: yes

  - name: Install desktop apps and tools
    block:
      - name: Install 1Password
        snap:
          name: 1password
          channel: latest/edge
        become: yes

      - name: Install tools
        apt:
          pkg:
            - htop
            - neofetch
          state: present
        become: yes

  - name: Configure swap
    tags: [ never, configure-swap ]
    block:
      - name: Set swap file variable
        set_fact:
          swapfile: /swapfile

      - name: "Check if swap file '{{ swapfile }}' already exists"
        stat:
          path: "{{ swapfile }}"
        register: swapfile_check

      - name: Check available swap before applying changes
        command: grep SwapTotal /proc/meminfo
        register: pre_swap_check

      - debug:
          msg: "Current available swap before applying changes is {{ pre_swap_check.stdout }}"

      - name: "Resize existing swap at '{{ swapfile }}' to {{ swap_space_gig }}G"
        when: swapfile_check.stat.exists
        become: yes
        block:
          - debug:
              msg: "Will update the swapfile at {{ swapfile }}"

          - name: Turn off current swap
            command: swapoff -a

          - name: Reallocate swap space
            command: "dd if=/dev/zero of=/{{ swapfile }} bs=1G count={{swap_space_gig }}"

          - name: Apply permissions
            file:
              path: "{{ swapfile }}"
              mode: 0600

          - name: Prepare swap file
            command: "mkswap {{ swapfile }}"

          - name: Turn on swap
            command: swapon -a

          - name: Set swapiness
            sysctl:
              name: vm.swappiness
              value: "1"

      - name: Check available swap after applying changes
        command: grep SwapTotal /proc/meminfo
        register: post_swap_check

      - debug:
          msg: "Current available swap after applying changes is {{ post_swap_check.stdout }}"